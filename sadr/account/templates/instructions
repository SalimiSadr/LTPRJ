https://docs.djangoproject.com/en/1.11/topics/auth/default/

install django
db settings
migrations
bookmarks project
account app
add app to setting




account.forms

from django import forms


class LoginForm(forms.Form):
username = forms.CharField()
password = forms.CharField(widget=forms.PasswordInput)


account.views

from django.contrib.auth import authenticate, login
from django.http import HttpResponse
from django.shortcuts import render

from account.forms import LoginForm


def user_login(request):
if request.method == 'POST':
form = LoginForm(request.POST)
if form.is_valid():
cd = form.cleaned_data
user = authenticate(username=cd['username'], password=cd['password'])
if user is not None:
if user.is_active:
login(request, user)
return HttpResponse('Authenticated successfully')
else:
return HttpResponse('Disabled account')
else:
return HttpResponse('Invalid login')
else:
form = LoginForm()
return render(request, 'account/login.html', {'form': form})


account.urls

from django.conf.urls import url

from account import views

urlpatterns = [
url(r'^login/$', views.user_login, name='login'),
]



base.urls

from django.conf.urls import url, include
from django.contrib import admin

urlpatterns = [
url(r'^admin/', admin.site.urls),
url(r'^account/', include('account.urls', namespace="account"))
]

------------------------------------------------------------------------------------------------------------------------------------

account.urls

from django.conf.urls import url

from django.contrib.auth.views import login, logout, logout_then_login
from . import views

urlpatterns = [
url(r'^login/$', login, name='login'),
url(r'^logout/$', logout, name='logout'),
url(r'^logout_then_login/$', logout_then_login, name='logout_then_login'),
url(r'^dashboard/$', views.dashboard, name='dashboard')
]


account.templates.base.html

{% load staticfiles %}
<!DOCTYPE html>
<html>
<head>
<title>{% block title %}{% endblock %}</title>
<link href="{% static "css/base.css" %}" rel="stylesheet">
</head>
<body>
<div id="header">
<span class="logo">Bookmarks</span>
{% if request.user.is_authenticated %}
<ul class="menu">
<li {% if section == "dashboard" %}class="selected"{% endif %}><a href="{% url "dashboard" %}">My dashboard</a></li>
<li {% if section == "images" %}class="selected"{% endif %}><a href="#">Images</a></li>
<li {% if section == "people" %}class="selected"{% endif %}><a href="#">People</a></li>
</ul>
{% endif %}

<span class="user">
{% if request.user.is_authenticated %}
Hello {{ request.user.first_name }}, <a href="{% url "logout" %}">Logout</a>
{% else %}
<a href="{% url "login" %}">Log-in</a>
{% endif %}
</span>
</div>

<div id="content">
{% block content %}
{% endblock %}
</div>
</body>
</html>

account.templates.registration.login.html

{% extends "base.html" %}

{% block title %}Log-in{% endblock %}

{% block content %}
<h1>Log-in</h1>
{% if form.errors %}
<p>Your username and password didn't match. Please try again.</p>
{% else %}
<p>Please, use the following form to log-in. If you don't have an account <a href="#">register here</a></p>
{% endif %}

<div class="login-form">
<form action="{% url "login" %}" method="post">
{{ form.as_p }}
{% csrf_token %}
<input type="hidden" name="next" value="{{ next }}" />
<p><input type="submit" value="Log-in"></p>
</form>
<p><a href="#">Forgotten your password?</a></p>
</div>

<div class="social">
<ul>
<li class="facebook"><a href="#">Login with Facebook</a></li>
<li class="twitter"><a href="#">Login with Twitter</a></li>
<li class="google"><a href="#">Login with Google</a></li>
</ul>
</div>
{% endblock %}


account.templates.registration.logged_out.html

{% extends "base.html" %}

{% block title %}Logged out{% endblock %}

{% block content %}
<h1>Logged out</h1>
<p>You have been successfully logged out. You can <a href="{% url "login" %}">log-in again</a>.</p>
{% endblock %}



account.templates.account.dashboard.html

{% extends "base.html" %}

{% block title %}Dashboard{% endblock %}

{% block content %}
<h1>Dashboard</h1>
<p>Welcome to your dashboard. You can <a href="#">edit your profile</a> or <a href="#">change your password</a>.</p>
{% endblock %}


account.views

from django.contrib.auth import authenticate, login
from django.contrib.auth.decorators import login_required
from django.http import HttpResponse
from django.shortcuts import render

from account.forms import LoginForm


def user_login(request):
if request.method == 'POST':
form = LoginForm(request.POST)
if form.is_valid():
cd = form.cleaned_data
user = authenticate(username=cd['username'], password=cd['password'])
if user is not None:
if user.is_active:
login(request, user)
return HttpResponse('Authenticated successfully')
else:
return HttpResponse('Disabled account')
else:
return HttpResponse('Invalid login')
else:
form = LoginForm()
return render(request, 'account/login.html', {'form': form})


@login_required
def dashboard(request):
return render(request, 'account/dashboard.html', {'section': 'dashboard'})



settings

from django.core.urlresolvers import reverse_lazy

LOGIN_REDIRECT_URL = reverse_lazy('dashboard')
LOGIN_URL = reverse_lazy('login')
LOGOUT_URL = reverse_lazy('logout')

------------------------------------------------------------------------------------------------------------------------------------

account.urls

url(r'^password-change/$', password_change, name='password_change'),
url(r'^password-change/done/$', password_change_done, name='password_change_done'),



account.templates.registration.password_change_done.html
{% extends "base.html" %}

{% block title %}Password changed{% endblock %}

{% block content %}
<h1>Password changed</h1>
<p>Your password has been successfully changed.</p>
{% endblock %}

account.templates.registration.password_change_form.html

{% extends "base.html" %}

{% block title %}Change you password{% endblock %}

{% block content %}
<h1>Change you password</h1>
<p>Use the form below to change your password.</p>
<form action="." method="post">
{{ form.as_p }}
<p><input type="submit" value="Change"></p>
{% csrf_token %}
</form>
{% endblock %}

account.templates.account.dashboard.html

<p>Welcome to your dashboard. You can <a href="#">edit your profile</a> or <a href="{% url 'password_change' %}">change your password</a>.</p>



------------------------------------------------------------------------------------------------------------------------------------

account.urls

url(r'^password-reset/$', password_reset, name='password_reset'),
url(r'^password-reset/done/$', password_reset_done, name='password_reset_done'),
url(r'^password-reset/confirm/(?P<uidb64>[-\w]+)/(?P<token>[-\w]+)/$', password_reset_confirm, name='password_reset_confirm'),
url(r'^password-reset/complete/$', password_reset_complete, name='password_reset_complete'),



account.templates.registration.password_reset_form

{% extends "base.html" %}

{% block title %}Reset your password{% endblock %}

{% block content %}
<h1>Forgotten your password?</h1>
<p>Enter your e-mail address to obtain a new password.</p>
<form action="." method="post">
{{ form.as_p }}
<p><input type="submit" value="Send e-mail"></p>
{% csrf_token %}
</form>
{% endblock %}


account.templates.registration.password_reset_done

{% extends "base.html" %}

{% block title %}Reset your password{% endblock %}

{% block content %}
<h1>Reset your password</h1>
<p>We've emailed you instructions for setting your password.</p>
<p>If you don't receive an email, please make sure you've entered the address you registered with.</p>
{% endblock %}

account.templates.registration.password_reset_complete

{% extends "base.html" %}

{% block title %}Password reset{% endblock %}

{% block content %}
<h1>Password set</h1>
<p>Your password has been set. You can <a href="{% url "login" %}">log in now</a></p>
{% endblock %}

account.templates.registration.password_reset_confirm

{% extends "base.html" %}

{% block title %}Reset your password{% endblock %}

{% block content %}
<h1>Reset your password</h1>
{% if validlink %}
<p>Please enter your new password twice:</p>
<form action="." method="post">
{{ form.as_p }}
{% csrf_token %}
<p><input type="submit" value="Change my password" /></p>
</form>
{% else %}
<p>The password reset link was invalid, possibly because it has already been used. Please request a new password reset.</p>
{% endif %}
{% endblock %}

account.templates.registration.password_reset_email

Someone asked for password reset for email {{ email }}. Follow the link below:
{{ protocol }}://{{ domain }}{% url "password_reset_confirm" uidb64=uid token=token %}

Your username, in case you've forgotten: {{ user.get_username }}



account.templates.registration.login.html

<p><a href="{% url "password_reset" %}">Forgotten your password?</a></p>


settings

https://docs.djangoproject.com/en/1.11/ref/settings/#std:setting-EMAIL_BACKEND
https://docs.djangoproject.com/en/1.11/topics/email/#console-backend

EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'




------------------------------------------------------------------------------------------------------------------------------------

account.forms

from django.contrib.auth.models import User


class UserRegistrationForm(forms.ModelForm):
password = forms.CharField(label='Password', widget=forms.PasswordInput)
password2 = forms.CharField(label='Repeat password', widget=forms.PasswordInput)

class Meta:
model = User
fields = ('username', 'first_name', 'email')

def clean_password2(self):
cd = self.cleaned_data
if cd['password'] != cd['password2']:
raise forms.ValidationError('Passwords don\'t match.')
return cd['password2']

account.templates.account.register.html

{% extends "base.html" %}

{% block title %}Create an account{% endblock %}

{% block content %}
<h1>Create an account</h1>
<p>Please, sign up using the following form:</p>
<form action="." method="post">
{{ user_form.as_p }}
{% csrf_token %}
<p><input type="submit" value="Create my account"></p>
</form>
{% endblock %}

account.templates.account.register_done.html

{% extends "base.html" %}

{% block title %}Welcome{% endblock %}

{% block content %}
<h1>Welcome {{ new_user.first_name }}!</h1>
<p>Your account has been successfully created. Now you can <a href="{% url "login" %}">log in</a>.</p>
{% endblock %}

account.views

def register(request):
if request.method == 'POST':
user_form = UserRegistrationForm(request.POST)

if user_form.is_valid():
new_user = user_form.save(commit=False)
new_user.set_password(user_form.cleaned_data['password'])
new_user.save()
return render(request,
'account/register_done.html',
{'new_user': new_user})
else:
user_form = UserRegistrationForm()
return render(request, 'account/register.html', {'user_form': user_form})


account.urls

url(r'^register/$', views.register, name='register')

acccount.templates.registration.login

<p>Please, use the following form to log-in. If you don't have an account <a href="{% url 'register' %}">register here</a></p>





------------------------------------------------------------------------------------------------------------------------------------

Profile and add edit to user profile + image upload + media

account.models

class Profile(models.Model):
user = models.OneToOneField(settings.AUTH_USER_MODEL)
date_of_birth = models.DateField(blank=True, null=True)
photo = models.ImageField(upload_to='users/%Y/%m/%d', blank=True)

def __str__(self):
return 'Profile for user {}'.format(self.user.username)


pip install pillow


setting
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media/')



base urls

if settings.DEBUG:
urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)



./manage.py makemigrations


account.admin

from django.contrib import admin
from .models import Profile


@admin.register(Profile)
class ProfileAdmin(admin.ModelAdmin):
list_display = ['user', 'date_of_birth', 'photo']



account.forms

class UserEditForm(forms.ModelForm):
class Meta:
model = User
fields = ('first_name', 'last_name', 'email')


class ProfileEditForm(forms.ModelForm):
class Meta:
model = Profile
fields = ('date_of_birth', 'photo')



account.views.register

profile = Profile.objects.create(user=new_user)

def register(request):
if request.method == 'POST':
user_form = UserRegistrationForm(request.POST)

if user_form.is_valid():
new_user = user_form.save(commit=False)
new_user.set_password(user_form.cleaned_data['password'])
new_user.save()
profile = Profile.objects.create(user=new_user)
return render(request,
'account/register_done.html',
{'new_user': new_user})
else:
user_form = UserRegistrationForm()
return render(request, 'account/register.html', {'user_form': user_form})



account.views.edit

@login_required
def edit(request):
if request.method == 'POST':
user_form = UserEditForm(instance=request.user,
data=request.POST)
profile_form = ProfileEditForm(instance=request.user.profile,
data=request.POST,
files=request.FILES)
if user_form.is_valid() and profile_form.is_valid():
user_form.save()
profile_form.save()
messages.success(request, 'Profile updated successfully')
else:
messages.error(request, 'Error updating your profile')
else:
user_form = UserEditForm(instance=request.user)
profile_form = ProfileEditForm(instance=request.user.profile)
return render(request, 'account/edit.html', {'user_form': user_form, 'profile_form': profile_form})


account.urls

url(r'^edit/$', views.edit, name='edit'),


account.templates.account.edit.html

{% extends "base.html" %}

{% block title %}Edit your account{% endblock %}

{% block content %}
<h1>Edit your account</h1>
<p>You can edit your account using the following form:</p>
<form action="." method="post" enctype="multipart/form-data">
{{ user_form.as_p }}
{{ profile_form.as_p }}
{% csrf_token %}
<p><input type="submit" value="Save changes"></p>
</form>
{% endblock %}



account.templates.accounts.dashboard.html


<p>Welcome to your dashboard. You can <a href="{% url "edit" %}">edit your profile</a> or <a href="{% url "password_change" %}">change your password</a>.</p>


https://docs.djangoproject.com/en/1.11/topics/auth/customizing/#substituting-a-custom-user-model
https://docs.djangoproject.com/en/1.11/ref/contrib/messages/


account.templates.base.html

{% load staticfiles %}
<!DOCTYPE html>
<html>
<head>
<title>{% block title %}{% endblock %}</title>
<link href="{% static "css/base.css" %}" rel="stylesheet">
</head>
<body>
<div id="header">
<span class="logo">Bookmarks</span>
{% if request.user.is_authenticated %}
<ul class="menu">
<li {% if section == "dashboard" %}class="selected"{% endif %}><a href="{% url "dashboard" %}">My dashboard</a></li>
<li {% if section == "images" %}class="selected"{% endif %}><a href="#">Images</a></li>
<li {% if section == "people" %}class="selected"{% endif %}><a href="#">People</a></li>
</ul>
{% endif %}

<span class="user">
{% if request.user.is_authenticated %}
Hello {{ request.user.first_name }}, <a href="{% url "logout" %}">Logout</a>
{% else %}
<a href="{% url "login" %}">Log-in</a>
{% endif %}
</span>
</div>

{% if messages %}
<ul class="messages">
{% for message in messages %}
<li class="{{ message.tags }}">
{{ message|safe }}
<a href="#" class="close">×</a>
</li>
{% endfor %}
</ul>
{% endif %}

<div id="content">
{% block content %}
{% endblock %}
</div>
</body>
</html>


--------------------------------------------------------------------------------------------------------------------------------------------------------
Authentication_backend
https://docs.djangoproject.com/en/1.11/topics/auth/customizing/

account.authentication

from django.contrib.auth.models import User


class EmailAuthBackend:

def authenticate(self, username=None, password=None):
try:
user = User.objects.get(email=username)
if user.check_password(password):
return user
return None
except User.DoesNotExist:
return None

def get_user(self, user_id):
try:
return User.objects.get(pk=user_id)
except User.DoesNotExist:
return None




settings

AUTHENTICATION_BACKENDS = (
'django.contrib.auth.backends.ModelBackend',
'account.authentication.EmailAuthBackend',
)


-------------------------------------------------------------------------------------------------------------------------------------------------------

CLASS WORKS : Social Authentications

http://python-social-auth.readthedocs.io/en/latest/configuration/django.html
http://python-social-auth.readthedocs.io/en/latest/configuration/porting_from_dsa.html?highlight=SOCIAL_AUTH_GOOGLE_OAUTH2_KEY

./manage.py migrate

add this to base urls.py
url('social-auth/', include('social_django.urls', namespace='social')),

add this to /etc/hosts
127.0.0.1	minaei-django.com
add ALLOWED_HOSTS = ['minaei-django.com'] to settings
http://minaei-django.com:8000/accounts/login/

add this to the settings
AUTHENTICATION_BACKENDS = (
'social_core.backends.google.GoogleOAuth2',
'django.contrib.auth.backends.ModelBackend',
'account.authentication.EmailAuthBackend',
)

SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = open(os.path.join(BASE_DIR, 'bookmark/google-oauth2-key')).read()
SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = open(os.path.join(BASE_DIR, 'bookmark/google-oauth2-secret')).read()

login.html
<div class="social">
<ul>
<li class="google"><a href="{% url "social:begin" "google-oauth2" %}">Login with Google</a></li>
</ul>
</div>



----------------------------------------------------------------------------------------------------------------------------------
Sharing images

./manage.py startapp images and add it to apps


images.models

from django.db import models
from django.conf import settings
from django.utils.text import slugify
from django.core.urlresolvers import reverse


class Image(models.Model):
user = models.ForeignKey(settings.AUTH_USER_MODEL, related_name="images_created")
title = models.CharField(max_length=200)
slug = models.SlugField(max_length=200, allow_unicode=True, blank=True)
url = models.URLField()
image = models.ImageField(upload_to='images/%Y/%m/%d')
description = models.TextField(blank=True)
created = models.DateTimeField(auto_now_add=True, db_index=True)

users_like = models.ManyToManyField(settings.AUTH_USER_MODEL, related_name='images_liked', blank=True)

total_likes = models.PositiveIntegerField(db_index=True, default=0)

def __str__(self):
return self.title

def save(self, *args, **kwargs):
if not self.slug:
self.slug = slugify(self.title, allow_unicode=True)
super(Image, self).save(*args, **kwargs)

def get_absolute_url(self):
return reverse('images:detail', args=[self.id, self.slug])



./manage.py makemigrations && ./manage.py migrate


images.admin

from django.contrib import admin
from .models import Image


@admin.register(Image)
class ImageAdmin(admin.ModelAdmin):
list_display = ['title', 'slug', 'image', 'created', 'total_likes']
list_filter = ['created']




images.forms

from urllib import request

from django import forms
from django.utils.text import slugify
from django.core.files.base import ContentFile

from .models import Image


class ImageCreateForm(forms.ModelForm):

class Meta:
model = Image
fields = ('title', 'url', 'description')
widgets = {
'url': forms.HiddenInput
}

def clean_url(self):
url = self.cleaned_data['url']
valid_extensions = ['jpg', 'jpeg', 'png']
extension = url.split('.')[-1]
if extension not in valid_extensions:
raise forms.ValidationError('The given URL does not match valid image extensions.')
return url

def save(self, commit=True):
image = super(ImageCreateForm, self).save(commit=False)
image_url = self.cleaned_data['url']
image_name = '{}.{}'.format(slugify(image.title, allow_unicode=True),
image_url.split('.')[-1].lower())
response = request.urlopen(image_url)
image.image.save(image_name,
ContentFile(response.read()),
save=False)
if commit:
image.save()
return image


images.views

from django.contrib import messages
from django.shortcuts import render, redirect, get_object_or_404

from images.forms import ImageCreateForm
from images.models import Image


def image_create(request):
if request.method == 'POST':
form = ImageCreateForm(data=request.POST)
if form.is_valid():
cd = form.cleaned_data
new_item = form.save(commit=False)
new_item.user = request.user
new_item.save()
messages.success(request, 'Image added successfully')
return redirect(new_item.get_absolute_url())
else:
form = ImageCreateForm(data=request.GET)

return render(request, 'images/image/create.html', {'section': 'images',
'form': form})


def image_detail(request, id, slug):
image = get_object_or_404(Image, id=id, slug=slug)
return render(request, 'images/image/detail.html', {'section': 'images',
'image': image})


images.urls

from django.conf.urls import url
from . import views

urlpatterns = [
url(r'^create/$', views.image_create, name='create'),
]


base urls

url(r'^images/', include('images.urls', namespace='images')),




templates.images.image.create.html
{% extends "base.html" %}

{% block title %}Bookmark an image{% endblock %}

{% block content %}
<h1>Bookmark an image</h1>
<img src="{{ request.GET.url }}" class="image-preview">
<form action="." method="post">
{{ form.as_p }}
{% csrf_token %}
<input type="submit" value="Bookmark it!">
</form>
{% endblock %}


images.static.css.bookmarklet.css
images.static.js.bookmarklet.js


accounts.templates.accounts.dashboard

{% extends "base.html" %}

{% block title %}Dashboard{% endblock %}

{% block content %}
<h1>Dashboard</h1>

{% with total_images_created=request.user.images_created.count %}
<p>Welcome to your dashboard. You have bookmarked {{ total_images_created }} image{{ total_images_created|pluralize }}.</p>
{% endwith %}

<p>Drag the following button to your bookmarks toolbar to bookmark images from other websites → <a href="javascript:{% include "bookmarklet_launcher.js" %}" class="button">Bookmark it!</a><p>

<p>You can also <a href="{% url "edit" %}">edit your profile</a> or <a href="{% url "password_change" %}">change your password</a>.<p>

{% endblock %}



https://github.com/SmileyChris/easy-thumbnails


templates.images.image.detail.html


{% extends "base.html" %}
{% load thumbnail %}

{% block title %}{{ image.title }}{% endblock %}

{% block content %}
<h1>{{ image.title }}</h1>
<a href="{{ image.image.url }}">
<img src="{{ image.image|thumbnail_url:'avatar' }}" alt="" />
</a>
{% with total_likes=image.users_like.count users_like=image.users_like.all %}
<div class="image-info">
<div>
<span class="count">
<span class="total">{{ total_likes }}</span>like{{ total_likes|pluralize }}
</span>
<a href="#" data-id="{{ image.id }}" data-action="{% if request.user in users_like %}un{% endif %}like" class="like button">
{% if request.user not in users_like %}
Like
{% else %}
Unlike
{% endif %}
</a>
</div>
{{ image.description|linebreaks }}
</div>

<div class="image-likes">
{% for user in image.users_like.all %}
<div>
<img src="{{ user.profile.photo.url }}">
<p>{{ user.first_name }}</p>
</div>
{% empty %}
Nobody likes this image yet.
{% endfor %}
</div>
{% endwith %}
{% endblock %}

{% block domready %}
$('a.like').click(function(e){
e.preventDefault();
$.post('{% url "images:like" %}',
{
id: $(this).data('id'),
action: $(this).data('action')
},
function(data){
if (data['status'] == 'ok')
{
var previous_action = $('a.like').data('action');

// toggle data-action
$('a.like').data('action', previous_action == 'like' ? 'unlike' : 'like');
// toggle link text
$('a.like').text(previous_action == 'like' ? 'Unlike' : 'Like');

// update total likes
var previous_likes = parseInt($('span.count .total').text());
$('span.count .total').text(previous_action == 'like' ? previous_likes + 1 : previous_likes - 1);
}
});

});
{% endblock %}







login and check this out:
http://127.0.0.1:8000/images/create/?title=minaei&url=http://minaei.ir/asset/img/minaei-header.png

Add Bookmarker

http://127.0.0.1:8000/accounts/dashboard/

go to any website and bookmark photos

----------------------------------------------------------------------------------------------------------------------------------

Adding Ajax actions with jQuery


https://docs.djangoproject.com/en/1.11/topics/http/decorators/

images.views.image_like

@login_required
@require_POST
def image_like(request):
image_id = request.POST.get('id')
action = request.POST.get('action')
if image_id and action:
try:
image = Image.objects.get(id=image_id)
if action == 'like':
image.users_like.add(request.user)
else:
image.users_like.remove(request.user)
return JsonResponse({'status': 'ok'})
except Image.DoesNotExist:
pass
return JsonResponse({'status': 'ko'})



images.urls

url(r'^like/$', views.image_like, name='like'),



accounts.templates.base.html

https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods
https://docs.djangoproject.com/en/1.11/ref/csrf/#ajax
https://docs.djangoproject.com/en/1.11/ref/csrf/#setting-the-token-on-the-ajax-request


<script src="{% static "js/jquery-1.12.4.min.js" %}"></script>
<script src="{% static "js/jquery.cookie.min.js" %}"></script>
<script>
var csrftoken = $.cookie('csrftoken');
function csrfSafeMethod(method) {
return (/^(GET|HEAD|OPTIONS|TRACE)$/.test(method));
}
$.ajaxSetup({
beforeSend: function(xhr, settings) {
if (!csrfSafeMethod(settings.type) && !this.crossDomain) {
xhr.setRequestHeader("X-CSRFToken", csrftoken);
}
}
});
$(document).ready(function(){
{% block domready %}
{% endblock %}
});
</script>



------------------------------------------------------------------------------------------------------------------------------
Custom decorator

base commom package (NOT APP)
__init__

common.decorators
from django.http import HttpResponseBadRequest


def ajax_required(f):
def wrap(request, *args, **kwargs):
if not request.is_ajax():
return HttpResponseBadRequest()
return f(request, *args, **kwargs)
wrap.__doc__ = f.__doc__
wrap.__name__ = f.__name__
return wrap

images.views.image_like

comment these and test in FIREFOX
@ajax_required : 400
@login_required : 302 redirect to login if you logged out
@require_POST : 405
http://127.0.0.1:8000/images/like/
BAD REQUEST















































